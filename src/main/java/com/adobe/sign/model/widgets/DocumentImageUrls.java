/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.widgets;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * DocumentImageUrls
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:50:01.583+05:30")
public class DocumentImageUrls {
  /**
   * ImageSize corresponding to the imageUrl returned 
   */
  @JsonAdapter(ImageSizeEnum.Adapter.class)
  public enum ImageSizeEnum {
    FIXED_WIDTH_50PX("FIXED_WIDTH_50px"),
    
    FIXED_WIDTH_250PX("FIXED_WIDTH_250px"),
    
    FIXED_WIDTH_675PX("FIXED_WIDTH_675px"),
    
    ZOOM_50_PERCENT("ZOOM_50_PERCENT"),
    
    ZOOM_75_PERCENT("ZOOM_75_PERCENT"),
    
    ZOOM_100_PERCENT("ZOOM_100_PERCENT"),
    
    ZOOM_125_PERCENT("ZOOM_125_PERCENT"),
    
    ZOOM_150_PERCENT("ZOOM_150_PERCENT"),
    
    ZOOM_200_PERCENT("ZOOM_200_PERCENT");

    private String value;

    ImageSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImageSizeEnum fromValue(String text) {
      for (ImageSizeEnum b : ImageSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ImageSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImageSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImageSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ImageSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("imageSize")
  private ImageSizeEnum imageSize = null;

  @SerializedName("imageURLs")
  private List<PageImageUrl> imageURLs = null;

  @SerializedName("imagesAvailable")
  private Boolean imagesAvailable = null;

  public DocumentImageUrls imageSize(ImageSizeEnum imageSize) {
    this.imageSize = imageSize;
    return this;
  }

   /**
   * ImageSize corresponding to the imageUrl returned 
   * @return imageSize
  **/
  @ApiModelProperty(value = "ImageSize corresponding to the imageUrl returned ")
  public ImageSizeEnum getImageSize() {
    return imageSize;
  }

  public void setImageSize(ImageSizeEnum imageSize) {
    this.imageSize = imageSize;
  }

  public DocumentImageUrls imageURLs(List<PageImageUrl> imageURLs) {
    this.imageURLs = imageURLs;
    return this;
  }

  public DocumentImageUrls addImageURLsItem(PageImageUrl imageURLsItem) {
    if (this.imageURLs == null) {
      this.imageURLs = new ArrayList<PageImageUrl>();
    }
    this.imageURLs.add(imageURLsItem);
    return this;
  }

   /**
   * A list of image url (one per page).
   * @return imageURLs
  **/
  @ApiModelProperty(value = "A list of image url (one per page).")
  public List<PageImageUrl> getImageURLs() {
    return imageURLs;
  }

  public void setImageURLs(List<PageImageUrl> imageURLs) {
    this.imageURLs = imageURLs;
  }

  public DocumentImageUrls imagesAvailable(Boolean imagesAvailable) {
    this.imagesAvailable = imagesAvailable;
    return this;
  }

   /**
   * true if images for the associated image size is available, else false.
   * @return imagesAvailable
  **/
  @ApiModelProperty(value = "true if images for the associated image size is available, else false.")
  public Boolean isImagesAvailable() {
    return imagesAvailable;
  }

  public void setImagesAvailable(Boolean imagesAvailable) {
    this.imagesAvailable = imagesAvailable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentImageUrls documentImageUrls = (DocumentImageUrls) o;
    return Objects.equals(this.imageSize, documentImageUrls.imageSize) &&
        Objects.equals(this.imageURLs, documentImageUrls.imageURLs) &&
        Objects.equals(this.imagesAvailable, documentImageUrls.imagesAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(imageSize, imageURLs, imagesAvailable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentImageUrls {\n");
    
    sb.append("    imageSize: ").append(toIndentedString(imageSize)).append("\n");
    sb.append("    imageURLs: ").append(toIndentedString(imageURLs)).append("\n");
    sb.append("    imagesAvailable: ").append(toIndentedString(imagesAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

