/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.widgets;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

/**
 * Document
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:50:01.583+05:30")
public class Document {
  @SerializedName("id")
  private String id = null;

  @SerializedName("label")
  private String label = null;

  @SerializedName("mimeType")
  private String mimeType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("numPages")
  private Integer numPages = null;

  public Document id(String id) {
    this.id = id;
    return this;
  }

   /**
   * ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call
   * @return id
  **/
  @ApiModelProperty(value = "ID of the document. In case of PUT call, this is the only field that is accepted in Document structure. Name and mimeType are ignored in case of PUT call")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Document label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Label of the document
   * @return label
  **/
  @ApiModelProperty(value = "Label of the document")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public Document mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * mimeType of the original file. This is returned in GET but not accepted back in PUT
   * @return mimeType
  **/
  @ApiModelProperty(value = "mimeType of the original file. This is returned in GET but not accepted back in PUT")
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }

  public Document name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the original document uploaded. This is returned in GET but not accepted back in PUT
   * @return name
  **/
  @ApiModelProperty(value = "Name of the original document uploaded. This is returned in GET but not accepted back in PUT")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Document numPages(Integer numPages) {
    this.numPages = numPages;
    return this;
  }

   /**
   * Number of pages in the document
   * @return numPages
  **/
  @ApiModelProperty(value = "Number of pages in the document")
  public Integer getNumPages() {
    return numPages;
  }

  public void setNumPages(Integer numPages) {
    this.numPages = numPages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.id, document.id) &&
        Objects.equals(this.label, document.label) &&
        Objects.equals(this.mimeType, document.mimeType) &&
        Objects.equals(this.name, document.name) &&
        Objects.equals(this.numPages, document.numPages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, label, mimeType, name, numPages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numPages: ").append(toIndentedString(numPages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

