/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.widgets;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * WidgetAgreement
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:50:01.583+05:30")
public class WidgetAgreement {
  @SerializedName("displayDate")
  private Date displayDate = null;

  @SerializedName("displayParticipantSetInfos")
  private List<DisplayWidgetParticipantSetInfo> displayParticipantSetInfos = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("esign")
  private Boolean esign = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("latestVersionId")
  private String latestVersionId = null;

  @SerializedName("name")
  private String name = null;

  /**
   * The current status of the document from the perspective of the originator
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    WAITING_FOR_MY_SIGNATURE("WAITING_FOR_MY_SIGNATURE"),
    
    WAITING_FOR_MY_APPROVAL("WAITING_FOR_MY_APPROVAL"),
    
    WAITING_FOR_MY_DELEGATION("WAITING_FOR_MY_DELEGATION"),
    
    WAITING_FOR_MY_ACKNOWLEDGEMENT("WAITING_FOR_MY_ACKNOWLEDGEMENT"),
    
    WAITING_FOR_MY_ACCEPTANCE("WAITING_FOR_MY_ACCEPTANCE"),
    
    WAITING_FOR_MY_FORM_FILLING("WAITING_FOR_MY_FORM_FILLING"),
    
    OUT_FOR_SIGNATURE("OUT_FOR_SIGNATURE"),
    
    OUT_FOR_APPROVAL("OUT_FOR_APPROVAL"),
    
    OUT_FOR_DELIVERY("OUT_FOR_DELIVERY"),
    
    OUT_FOR_ACCEPTANCE("OUT_FOR_ACCEPTANCE"),
    
    OUT_FOR_FORM_FILLING("OUT_FOR_FORM_FILLING"),
    
    SIGNED("SIGNED"),
    
    APPROVED("APPROVED"),
    
    FORM_FILLED("FORM_FILLED"),
    
    DELIVERED("DELIVERED"),
    
    ACCEPTED("ACCEPTED"),
    
    ARCHIVED("ARCHIVED"),
    
    CANCELLED("CANCELLED"),
    
    EXPIRED("EXPIRED"),
    
    WAITING_FOR_PREFILL("WAITING_FOR_PREFILL"),
    
    DOCUMENTS_NOT_YET_PROCESSED("DOCUMENTS_NOT_YET_PROCESSED"),
    
    WAITING_FOR_MY_VERIFICATION("WAITING_FOR_MY_VERIFICATION"),
    
    WAITING_FOR_VERIFICATION("WAITING_FOR_VERIFICATION");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public WidgetAgreement displayDate(Date displayDate) {
    this.displayDate = displayDate;
    return this;
  }

   /**
   * The display date for the agreement. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @return displayDate
  **/
  @ApiModelProperty(value = "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time")
  public Date getDisplayDate() {
    return displayDate;
  }

  public void setDisplayDate(Date displayDate) {
    this.displayDate = displayDate;
  }

  public WidgetAgreement displayParticipantSetInfos(List<DisplayWidgetParticipantSetInfo> displayParticipantSetInfos) {
    this.displayParticipantSetInfos = displayParticipantSetInfos;
    return this;
  }

  public WidgetAgreement addDisplayParticipantSetInfosItem(DisplayWidgetParticipantSetInfo displayParticipantSetInfosItem) {
    if (this.displayParticipantSetInfos == null) {
      this.displayParticipantSetInfos = new ArrayList<DisplayWidgetParticipantSetInfo>();
    }
    this.displayParticipantSetInfos.add(displayParticipantSetInfosItem);
    return this;
  }

   /**
   * The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user
   * @return displayParticipantSetInfos
  **/
  @ApiModelProperty(value = "The most relevant current user set for the agreement. It is typically the next signer if the agreement is from the current user, or the sender if received from another user")
  public List<DisplayWidgetParticipantSetInfo> getDisplayParticipantSetInfos() {
    return displayParticipantSetInfos;
  }

  public void setDisplayParticipantSetInfos(List<DisplayWidgetParticipantSetInfo> displayParticipantSetInfos) {
    this.displayParticipantSetInfos = displayParticipantSetInfos;
  }

  public WidgetAgreement id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of the agreement.If provided in POST, it will simply be ignored
   * @return id
  **/
  @ApiModelProperty(value = "The unique identifier of the agreement.If provided in POST, it will simply be ignored")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public WidgetAgreement esign(Boolean esign) {
    this.esign = esign;
    return this;
  }

   /**
   * True if this is an e-sign document
   * @return esign
  **/
  @ApiModelProperty(value = "True if this is an e-sign document")
  public Boolean isEsign() {
    return esign;
  }

  public void setEsign(Boolean esign) {
    this.esign = esign;
  }

  public WidgetAgreement hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * True if agreement is hidden for the user
   * @return hidden
  **/
  @ApiModelProperty(value = "True if agreement is hidden for the user")
  public Boolean isHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public WidgetAgreement latestVersionId(String latestVersionId) {
    this.latestVersionId = latestVersionId;
    return this;
  }

   /**
   * A version ID which uniquely identifies the current version of the agreement
   * @return latestVersionId
  **/
  @ApiModelProperty(value = "A version ID which uniquely identifies the current version of the agreement")
  public String getLatestVersionId() {
    return latestVersionId;
  }

  public void setLatestVersionId(String latestVersionId) {
    this.latestVersionId = latestVersionId;
  }

  public WidgetAgreement name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the Agreement
   * @return name
  **/
  @ApiModelProperty(value = "Name of the Agreement")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WidgetAgreement status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The current status of the document from the perspective of the originator
   * @return status
  **/
  @ApiModelProperty(value = "The current status of the document from the perspective of the originator")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetAgreement widgetAgreement = (WidgetAgreement) o;
    return Objects.equals(this.displayDate, widgetAgreement.displayDate) &&
        Objects.equals(this.displayParticipantSetInfos, widgetAgreement.displayParticipantSetInfos) &&
        Objects.equals(this.id, widgetAgreement.id) &&
        Objects.equals(this.esign, widgetAgreement.esign) &&
        Objects.equals(this.hidden, widgetAgreement.hidden) &&
        Objects.equals(this.latestVersionId, widgetAgreement.latestVersionId) &&
        Objects.equals(this.name, widgetAgreement.name) &&
        Objects.equals(this.status, widgetAgreement.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayDate, displayParticipantSetInfos, id, esign, hidden, latestVersionId, name, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetAgreement {\n");
    
    sb.append("    displayDate: ").append(toIndentedString(displayDate)).append("\n");
    sb.append("    displayParticipantSetInfos: ").append(toIndentedString(displayParticipantSetInfos)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    esign: ").append(toIndentedString(esign)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    latestVersionId: ").append(toIndentedString(latestVersionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

