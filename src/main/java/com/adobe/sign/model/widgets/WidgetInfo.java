/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.widgets;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * WidgetInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:50:01.583+05:30")
public class WidgetInfo {
  @SerializedName("additionalParticipantSetsInfo")
  private List<WidgetAdditionalParticipationSetInfo> additionalParticipantSetsInfo = null;

  @SerializedName("authFailureInfo")
  private WidgetRedirectionInfo authFailureInfo = null;

  @SerializedName("ccs")
  private List<WidgetCcInfo> ccs = null;

  @SerializedName("completionInfo")
  private WidgetRedirectionInfo completionInfo = null;

  @SerializedName("createdDate")
  private Date createdDate = null;

  @SerializedName("creatorEmail")
  private String creatorEmail = null;

  @SerializedName("fileInfos")
  private List<FileInfo> fileInfos = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("locale")
  private String locale = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("securityOption")
  private SecurityOption securityOption = null;

  /**
   * The state in which the widget should land. For example in order to create a widget in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the widget can be obtained from GET /widgets/ID
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    AUTHORING("AUTHORING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  /**
   * Status of the Widget. If provided in POST, it will simply be ignored
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    AUTHORING("AUTHORING"),
    
    ACTIVE("ACTIVE"),
    
    DOCUMENTS_NOT_YET_PROCESSED("DOCUMENTS_NOT_YET_PROCESSED"),
    
    DISABLED("DISABLED"),
    
    DISCARDED("DISCARDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("vaultingInfo")
  private VaultingInfo vaultingInfo = null;

  @SerializedName("widgetInActiveInfo")
  private WidgetInActiveInfo widgetInActiveInfo = null;

  @SerializedName("widgetParticipantSetInfo")
  private WidgetParticipantSetInfo widgetParticipantSetInfo = null;

  public WidgetInfo additionalParticipantSetsInfo(List<WidgetAdditionalParticipationSetInfo> additionalParticipantSetsInfo) {
    this.additionalParticipantSetsInfo = additionalParticipantSetsInfo;
    return this;
  }

  public WidgetInfo addAdditionalParticipantSetsInfoItem(WidgetAdditionalParticipationSetInfo additionalParticipantSetsInfoItem) {
    if (this.additionalParticipantSetsInfo == null) {
      this.additionalParticipantSetsInfo = new ArrayList<WidgetAdditionalParticipationSetInfo>();
    }
    this.additionalParticipantSetsInfo.add(additionalParticipantSetsInfoItem);
    return this;
  }

   /**
   * List of all the participants in the widget except widget signer
   * @return additionalParticipantSetsInfo
  **/
  @ApiModelProperty(value = "List of all the participants in the widget except widget signer")
  public List<WidgetAdditionalParticipationSetInfo> getAdditionalParticipantSetsInfo() {
    return additionalParticipantSetsInfo;
  }

  public void setAdditionalParticipantSetsInfo(List<WidgetAdditionalParticipationSetInfo> additionalParticipantSetsInfo) {
    this.additionalParticipantSetsInfo = additionalParticipantSetsInfo;
  }

  public WidgetInfo authFailureInfo(WidgetRedirectionInfo authFailureInfo) {
    this.authFailureInfo = authFailureInfo;
    return this;
  }

   /**
   * URL and associated properties for the error page the widget signer will be taken after failing to authenticate
   * @return authFailureInfo
  **/
  @ApiModelProperty(value = "URL and associated properties for the error page the widget signer will be taken after failing to authenticate")
  public WidgetRedirectionInfo getAuthFailureInfo() {
    return authFailureInfo;
  }

  public void setAuthFailureInfo(WidgetRedirectionInfo authFailureInfo) {
    this.authFailureInfo = authFailureInfo;
  }

  public WidgetInfo ccs(List<WidgetCcInfo> ccs) {
    this.ccs = ccs;
    return this;
  }

  public WidgetInfo addCcsItem(WidgetCcInfo ccsItem) {
    if (this.ccs == null) {
      this.ccs = new ArrayList<WidgetCcInfo>();
    }
    this.ccs.add(ccsItem);
    return this;
  }

   /**
   * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through widget is signed. The email addresses will also receive a copy of the document, attached as a PDF file
   * @return ccs
  **/
  @ApiModelProperty(value = "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through widget is signed. The email addresses will also receive a copy of the document, attached as a PDF file")
  public List<WidgetCcInfo> getCcs() {
    return ccs;
  }

  public void setCcs(List<WidgetCcInfo> ccs) {
    this.ccs = ccs;
  }

  public WidgetInfo completionInfo(WidgetRedirectionInfo completionInfo) {
    this.completionInfo = completionInfo;
    return this;
  }

   /**
   * URL and associated properties for the success page the widget signer will be taken to after performing desired action on the widget
   * @return completionInfo
  **/
  @ApiModelProperty(value = "URL and associated properties for the success page the widget signer will be taken to after performing desired action on the widget")
  public WidgetRedirectionInfo getCompletionInfo() {
    return completionInfo;
  }

  public void setCompletionInfo(WidgetRedirectionInfo completionInfo) {
    this.completionInfo = completionInfo;
  }

  public WidgetInfo createdDate(Date createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Date when widget was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @return createdDate
  **/
  @ApiModelProperty(value = "Date when widget was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time")
  public Date getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Date createdDate) {
    this.createdDate = createdDate;
  }

  public WidgetInfo creatorEmail(String creatorEmail) {
    this.creatorEmail = creatorEmail;
    return this;
  }

   /**
   * Email of widget creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored
   * @return creatorEmail
  **/
  @ApiModelProperty(value = "Email of widget creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored")
  public String getCreatorEmail() {
    return creatorEmail;
  }

  public void setCreatorEmail(String creatorEmail) {
    this.creatorEmail = creatorEmail;
  }

  public WidgetInfo fileInfos(List<FileInfo> fileInfos) {
    this.fileInfos = fileInfos;
    return this;
  }

  public WidgetInfo addFileInfosItem(FileInfo fileInfosItem) {
    if (this.fileInfos == null) {
      this.fileInfos = new ArrayList<FileInfo>();
    }
    this.fileInfos.add(fileInfosItem);
    return this;
  }

   /**
   * A list of one or more files (or references to files) that will be used to create the widget. If more than one file is provided, they will be combined before the widget is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified
   * @return fileInfos
  **/
  @ApiModelProperty(value = "A list of one or more files (or references to files) that will be used to create the widget. If more than one file is provided, they will be combined before the widget is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified")
  public List<FileInfo> getFileInfos() {
    return fileInfos;
  }

  public void setFileInfos(List<FileInfo> fileInfos) {
    this.fileInfos = fileInfos;
  }

  public WidgetInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A resource identifier that can be used to uniquely identify the widget in other apis. If provided in POST, it will simply be ignored
   * @return id
  **/
  @ApiModelProperty(value = "A resource identifier that can be used to uniquely identify the widget in other apis. If provided in POST, it will simply be ignored")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public WidgetInfo locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * The locale associated with this widget - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the widget creator
   * @return locale
  **/
  @ApiModelProperty(value = "The locale associated with this widget - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the widget creator")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public WidgetInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the widget that will be used to identify it, in emails, website and other places
   * @return name
  **/
  @ApiModelProperty(value = "The name of the widget that will be used to identify it, in emails, website and other places")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WidgetInfo securityOption(SecurityOption securityOption) {
    this.securityOption = securityOption;
    return this;
  }

   /**
   * Secondary security parameters for the widget
   * @return securityOption
  **/
  @ApiModelProperty(value = "Secondary security parameters for the widget")
  public SecurityOption getSecurityOption() {
    return securityOption;
  }

  public void setSecurityOption(SecurityOption securityOption) {
    this.securityOption = securityOption;
  }

  public WidgetInfo state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state in which the widget should land. For example in order to create a widget in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the widget can be obtained from GET /widgets/ID
   * @return state
  **/
  @ApiModelProperty(value = "The state in which the widget should land. For example in order to create a widget in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the widget can be obtained from GET /widgets/ID")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public WidgetInfo status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the Widget. If provided in POST, it will simply be ignored
   * @return status
  **/
  @ApiModelProperty(value = "Status of the Widget. If provided in POST, it will simply be ignored")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public WidgetInfo vaultingInfo(VaultingInfo vaultingInfo) {
    this.vaultingInfo = vaultingInfo;
    return this;
  }

   /**
   * Vaulting properties that allows Adobe Sign to securely store documents with a vault provider
   * @return vaultingInfo
  **/
  @ApiModelProperty(value = "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider")
  public VaultingInfo getVaultingInfo() {
    return vaultingInfo;
  }

  public void setVaultingInfo(VaultingInfo vaultingInfo) {
    this.vaultingInfo = vaultingInfo;
  }

  public WidgetInfo widgetInActiveInfo(WidgetInActiveInfo widgetInActiveInfo) {
    this.widgetInActiveInfo = widgetInActiveInfo;
    return this;
  }

   /**
   * The custom message which will be displayed to the user or the URL to which user will be redirected when the widget is accessed in a disabled state. This can only be specified in PUT request
   * @return widgetInActiveInfo
  **/
  @ApiModelProperty(value = "The custom message which will be displayed to the user or the URL to which user will be redirected when the widget is accessed in a disabled state. This can only be specified in PUT request")
  public WidgetInActiveInfo getWidgetInActiveInfo() {
    return widgetInActiveInfo;
  }

  public void setWidgetInActiveInfo(WidgetInActiveInfo widgetInActiveInfo) {
    this.widgetInActiveInfo = widgetInActiveInfo;
  }

  public WidgetInfo widgetParticipantSetInfo(WidgetParticipantSetInfo widgetParticipantSetInfo) {
    this.widgetParticipantSetInfo = widgetParticipantSetInfo;
    return this;
  }

   /**
   * Represents widget participant for whom email should not be provided
   * @return widgetParticipantSetInfo
  **/
  @ApiModelProperty(value = "Represents widget participant for whom email should not be provided")
  public WidgetParticipantSetInfo getWidgetParticipantSetInfo() {
    return widgetParticipantSetInfo;
  }

  public void setWidgetParticipantSetInfo(WidgetParticipantSetInfo widgetParticipantSetInfo) {
    this.widgetParticipantSetInfo = widgetParticipantSetInfo;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WidgetInfo widgetInfo = (WidgetInfo) o;
    return Objects.equals(this.additionalParticipantSetsInfo, widgetInfo.additionalParticipantSetsInfo) &&
        Objects.equals(this.authFailureInfo, widgetInfo.authFailureInfo) &&
        Objects.equals(this.ccs, widgetInfo.ccs) &&
        Objects.equals(this.completionInfo, widgetInfo.completionInfo) &&
        Objects.equals(this.createdDate, widgetInfo.createdDate) &&
        Objects.equals(this.creatorEmail, widgetInfo.creatorEmail) &&
        Objects.equals(this.fileInfos, widgetInfo.fileInfos) &&
        Objects.equals(this.id, widgetInfo.id) &&
        Objects.equals(this.locale, widgetInfo.locale) &&
        Objects.equals(this.name, widgetInfo.name) &&
        Objects.equals(this.securityOption, widgetInfo.securityOption) &&
        Objects.equals(this.state, widgetInfo.state) &&
        Objects.equals(this.status, widgetInfo.status) &&
        Objects.equals(this.vaultingInfo, widgetInfo.vaultingInfo) &&
        Objects.equals(this.widgetInActiveInfo, widgetInfo.widgetInActiveInfo) &&
        Objects.equals(this.widgetParticipantSetInfo, widgetInfo.widgetParticipantSetInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalParticipantSetsInfo, authFailureInfo, ccs, completionInfo, createdDate, creatorEmail, fileInfos, id, locale, name, securityOption, state, status, vaultingInfo, widgetInActiveInfo, widgetParticipantSetInfo);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WidgetInfo {\n");
    
    sb.append("    additionalParticipantSetsInfo: ").append(toIndentedString(additionalParticipantSetsInfo)).append("\n");
    sb.append("    authFailureInfo: ").append(toIndentedString(authFailureInfo)).append("\n");
    sb.append("    ccs: ").append(toIndentedString(ccs)).append("\n");
    sb.append("    completionInfo: ").append(toIndentedString(completionInfo)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    creatorEmail: ").append(toIndentedString(creatorEmail)).append("\n");
    sb.append("    fileInfos: ").append(toIndentedString(fileInfos)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    securityOption: ").append(toIndentedString(securityOption)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vaultingInfo: ").append(toIndentedString(vaultingInfo)).append("\n");
    sb.append("    widgetInActiveInfo: ").append(toIndentedString(widgetInActiveInfo)).append("\n");
    sb.append("    widgetParticipantSetInfo: ").append(toIndentedString(widgetParticipantSetInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

