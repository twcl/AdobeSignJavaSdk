/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.agreements;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Hyperlink-specific data for hyperlink form fields
 */
@ApiModel(description = "Hyperlink-specific data for hyperlink form fields")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:48:52.659+05:30")
public class FormFieldHyperlink {
  @SerializedName("documentLocation")
  private FormFieldLocation documentLocation = null;

  /**
   * Type of link in an agreement.
   */
  @JsonAdapter(LinkTypeEnum.Adapter.class)
  public enum LinkTypeEnum {
    INTERNAL("INTERNAL"),
    
    EXTERNAL("EXTERNAL"),
    
    FROM_TEXT("FROM_TEXT");

    private String value;

    LinkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LinkTypeEnum fromValue(String text) {
      for (LinkTypeEnum b : LinkTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LinkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LinkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LinkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LinkTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("linkType")
  private LinkTypeEnum linkType = null;

  @SerializedName("url")
  private String url = null;

  public FormFieldHyperlink documentLocation(FormFieldLocation documentLocation) {
    this.documentLocation = documentLocation;
    return this;
  }

   /**
   * Location on the document pointed by the link in case of INTERNAL type link
   * @return documentLocation
  **/
  @ApiModelProperty(value = "Location on the document pointed by the link in case of INTERNAL type link")
  public FormFieldLocation getDocumentLocation() {
    return documentLocation;
  }

  public void setDocumentLocation(FormFieldLocation documentLocation) {
    this.documentLocation = documentLocation;
  }

  public FormFieldHyperlink linkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
    return this;
  }

   /**
   * Type of link in an agreement.
   * @return linkType
  **/
  @ApiModelProperty(value = "Type of link in an agreement.")
  public LinkTypeEnum getLinkType() {
    return linkType;
  }

  public void setLinkType(LinkTypeEnum linkType) {
    this.linkType = linkType;
  }

  public FormFieldHyperlink url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL, in case of EXTERNAL type link
   * @return url
  **/
  @ApiModelProperty(value = "URL, in case of EXTERNAL type link")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldHyperlink formFieldHyperlink = (FormFieldHyperlink) o;
    return Objects.equals(this.documentLocation, formFieldHyperlink.documentLocation) &&
        Objects.equals(this.linkType, formFieldHyperlink.linkType) &&
        Objects.equals(this.url, formFieldHyperlink.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentLocation, linkType, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldHyperlink {\n");
    
    sb.append("    documentLocation: ").append(toIndentedString(documentLocation)).append("\n");
    sb.append("    linkType: ").append(toIndentedString(linkType)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

