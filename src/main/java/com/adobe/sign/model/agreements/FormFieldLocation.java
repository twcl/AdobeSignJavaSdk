/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.agreements;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Location information for form fields
 */
@ApiModel(description = "Location information for form fields")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:48:52.659+05:30")
public class FormFieldLocation {
  @SerializedName("height")
  private Double height = null;

  @SerializedName("left")
  private Double left = null;

  @SerializedName("pageNumber")
  private Integer pageNumber = null;

  @SerializedName("top")
  private Double top = null;

  @SerializedName("width")
  private Double width = null;

  public FormFieldLocation height(Double height) {
    this.height = height;
    return this;
  }

   /**
   * Height of the form field in pixels
   * @return height
  **/
  @ApiModelProperty(value = "Height of the form field in pixels")
  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }

  public FormFieldLocation left(Double left) {
    this.left = left;
    return this;
  }

   /**
   * No. of pixels from left of the page for form field placement
   * @return left
  **/
  @ApiModelProperty(value = "No. of pixels from left of the page for form field placement")
  public Double getLeft() {
    return left;
  }

  public void setLeft(Double left) {
    this.left = left;
  }

  public FormFieldLocation pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

   /**
   * Number of the page where form field has to be placed, starting from 1.
   * @return pageNumber
  **/
  @ApiModelProperty(value = "Number of the page where form field has to be placed, starting from 1.")
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }

  public FormFieldLocation top(Double top) {
    this.top = top;
    return this;
  }

   /**
   * No. of pixels from bottom of the page for form field placement
   * @return top
  **/
  @ApiModelProperty(value = "No. of pixels from bottom of the page for form field placement")
  public Double getTop() {
    return top;
  }

  public void setTop(Double top) {
    this.top = top;
  }

  public FormFieldLocation width(Double width) {
    this.width = width;
    return this;
  }

   /**
   * Width of the form field in pixels
   * @return width
  **/
  @ApiModelProperty(value = "Width of the form field in pixels")
  public Double getWidth() {
    return width;
  }

  public void setWidth(Double width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormFieldLocation formFieldLocation = (FormFieldLocation) o;
    return Objects.equals(this.height, formFieldLocation.height) &&
        Objects.equals(this.left, formFieldLocation.left) &&
        Objects.equals(this.pageNumber, formFieldLocation.pageNumber) &&
        Objects.equals(this.top, formFieldLocation.top) &&
        Objects.equals(this.width, formFieldLocation.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(height, left, pageNumber, top, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormFieldLocation {\n");
    
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

