/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.model.libraryDocuments;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Date;

/**
 * LibraryView
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-11T15:49:09.941+05:30")
public class LibraryView {
  @SerializedName("embeddedCode")
  private String embeddedCode = null;

  @SerializedName("expiration")
  private Date expiration = null;

  @SerializedName("isCurrent")
  private Boolean isCurrent = null;

  /**
   * Name of the requested libraryDocument view
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    EDIT("EDIT"),
    
    DOCUMENT("DOCUMENT"),
    
    MANAGE("MANAGE"),
    
    SEND("SEND"),
    
    ALL("ALL");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String text) {
      for (NameEnum b : NameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NameEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("name")
  private NameEnum name = null;

  @SerializedName("url")
  private String url = null;

  public LibraryView embeddedCode(String embeddedCode) {
    this.embeddedCode = embeddedCode;
    return this;
  }

   /**
   * Embedded code of url of resource 
   * @return embeddedCode
  **/
  @ApiModelProperty(value = "Embedded code of url of resource ")
  public String getEmbeddedCode() {
    return embeddedCode;
  }

  public void setEmbeddedCode(String embeddedCode) {
    this.embeddedCode = embeddedCode;
  }

  public LibraryView expiration(Date expiration) {
    this.expiration = expiration;
    return this;
  }

   /**
   * Expiration of user url 
   * @return expiration
  **/
  @ApiModelProperty(value = "Expiration of user url ")
  public Date getExpiration() {
    return expiration;
  }

  public void setExpiration(Date expiration) {
    this.expiration = expiration;
  }

  public LibraryView isCurrent(Boolean isCurrent) {
    this.isCurrent = isCurrent;
    return this;
  }

   /**
   * True if this view is the current view
   * @return isCurrent
  **/
  @ApiModelProperty(value = "True if this view is the current view")
  public Boolean isIsCurrent() {
    return isCurrent;
  }

  public void setIsCurrent(Boolean isCurrent) {
    this.isCurrent = isCurrent;
  }

  public LibraryView name(NameEnum name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the requested libraryDocument view
   * @return name
  **/
  @ApiModelProperty(value = "Name of the requested libraryDocument view")
  public NameEnum getName() {
    return name;
  }

  public void setName(NameEnum name) {
    this.name = name;
  }

  public LibraryView url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Url of resource location
   * @return url
  **/
  @ApiModelProperty(value = "Url of resource location")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryView libraryView = (LibraryView) o;
    return Objects.equals(this.embeddedCode, libraryView.embeddedCode) &&
        Objects.equals(this.expiration, libraryView.expiration) &&
        Objects.equals(this.isCurrent, libraryView.isCurrent) &&
        Objects.equals(this.name, libraryView.name) &&
        Objects.equals(this.url, libraryView.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embeddedCode, expiration, isCurrent, name, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryView {\n");
    
    sb.append("    embeddedCode: ").append(toIndentedString(embeddedCode)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    isCurrent: ").append(toIndentedString(isCurrent)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

