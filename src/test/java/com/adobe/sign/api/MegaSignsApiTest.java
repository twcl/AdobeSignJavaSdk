/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.api;

import com.adobe.sign.model.megaSigns.MegaSignChildAgreements;
import com.adobe.sign.model.megaSigns.MegaSignCreationInfo;
import com.adobe.sign.model.megaSigns.MegaSignCreationResponse;
import com.adobe.sign.model.megaSigns.MegaSignStateInfo;
import com.adobe.sign.model.megaSigns.MegaSignViewInfo;
import com.adobe.sign.model.megaSigns.MegaSignViewResponse;
import com.adobe.sign.model.megaSigns.MegaSigns;
import com.adobe.sign.model.megaSigns.MegasignEventList;
import com.adobe.sign.model.ApiException;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for MegaSignsApi
 */
@Ignore
public class MegaSignsApiTest {

    private final MegaSignsApi api = new MegaSignsApi();

    
    /**
     * Send an agreement out for signature to multiple recipients. Each recipient will receive and sign their own copy of the agreement.
     *
     * This is a primary endpoint which is used to create a new megaSign. A megaSign can be created using transientDocument, libraryDocument or a URL. You can create a megaSign in &lt;b&gt;IN_PROCESS&lt;/b&gt; - Create a megaSign in this state to immediately send it. You can use the PUT/megaSigns/{megaSignId}/state endpoint to transition the state of megaSign. An allowed transition would follow the following sequence: IN_PROCESS -&gt; CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMegaSignTest() throws ApiException {
        String authorization = null;
        MegaSignCreationInfo megaSignInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        MegaSignCreationResponse response = api.createMegaSign(authorization, megaSignInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of the original childAgreementsInfoFile that was uploaded by sender while creating the MegaSign.
     *
     * CSV file stream containing form data information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildAgreementsInfoFileTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String childAgreementsInfoFileId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getChildAgreementsInfoFile(authorization, megaSignId, childAgreementsInfoFileId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for the MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        MegasignEventList response = api.getEvents(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Get all the child agreements of the specified MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignChildAgreementsTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String cursor = null;
        Integer pageSize = null;
        MegaSignChildAgreements response = api.getMegaSignChildAgreements(authorization, megaSignId, xApiUser, xOnBehalfOfUser, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single combined PDF document for the documents associated with the MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getMegaSignCombinedDocument(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered by recipients into interactive form fields at the time they signed the child agreements of the specified MegaSign agreement
     *
     * CSV file stream containing form data information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignFormDataTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        byte[] response = api.getMegaSignFormData(authorization, megaSignId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Get detailed information of the specified MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignInfoTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        MegaSignCreationInfo response = api.getMegaSignInfo(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the requested views of mega sign agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignViewTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        MegaSignViewInfo megaSignViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        MegaSignViewResponse response = api.getMegaSignView(authorization, megaSignId, megaSignViewInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves MegaSign parent agreements for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String cursor = null;
        Integer pageSize = null;
        MegaSigns response = api.getMegaSigns(authorization, xApiUser, xOnBehalfOfUser, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Updates the state of a MegaSign identified by MegaSignId in the path.
     *
     * This endpoint can be used by creator of the MegaSign to transition between the states of megaSign. An allowed transition would follow the following sequence :  IN_PROCESS-&gt;CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMegaSignStateTest() throws ApiException {
        String authorization = null;
        String ifMatch = null;
        String megaSignId = null;
        MegaSignStateInfo megaSignStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateMegaSignState(authorization, ifMatch, megaSignId, megaSignStateInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
}
