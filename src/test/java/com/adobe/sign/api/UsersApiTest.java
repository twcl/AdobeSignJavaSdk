/**
*  Copyright 2019 Adobe Systems Incorporated. All rights reserved.
*  This file is licensed to you under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License. You may obtain a copy
*  of the License at http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software distributed under
*  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
*  OF ANY KIND, either express or implied. See the License for the specific language
*  governing permissions and limitations under the License.
*
*
**/


/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.adobe.sign.api;

import com.adobe.sign.model.ApiException;
import com.adobe.sign.model.users.DetailedUserInfo;
import com.adobe.sign.model.users.UserGroupsInfo;
import com.adobe.sign.model.users.UserStateInfo;
import com.adobe.sign.model.users.UserStatusUpdateResponse;
import com.adobe.sign.model.users.UserViewInfo;
import com.adobe.sign.model.users.UserViewResponse;
import com.adobe.sign.model.users.UsersInfo;
import org.junit.Test;
import org.junit.Ignore;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Retrieves the groups of the user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getGroupsOfUserTest() throws ApiException {
        String authorization = null;
        String userId = null;
        String xApiUser = null;
        UserGroupsInfo response = api.getGroupsOfUser(authorization, userId, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves detailed information about the user in the caller account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserDetailTest() throws ApiException {
        String authorization = null;
        String userId = null;
        String xApiUser = null;
        DetailedUserInfo response = api.getUserDetail(authorization, userId, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the URL of manage, account settings and user profile page.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserViewsTest() throws ApiException {
        String authorization = null;
        String userId = null;
        UserViewInfo userViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        UserViewResponse response = api.getUserViews(authorization, userId, userViewInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves all the users in an account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String cursor = null;
        Integer pageSize = null;
        UsersInfo response = api.getUsers(authorization, xApiUser, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Update an user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyUserTest() throws ApiException {
        String authorization = null;
        String userId = null;
        DetailedUserInfo detailedUserInfo = null;
        String xApiUser = null;
        api.modifyUser(authorization, userId, detailedUserInfo, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Activate/Deactivate a given user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyUserStateTest() throws ApiException {
        String authorization = null;
        String userId = null;
        UserStateInfo userStateInfo = null;
        String xApiUser = null;
        UserStatusUpdateResponse response = api.modifyUserState(authorization, userId, userStateInfo, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Updates the groups of the user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateGroupsOfUserTest() throws ApiException {
        String authorization = null;
        String userId = null;
        UserGroupsInfo userGroupsInfo = null;
        String xApiUser = null;
        api.updateGroupsOfUser(authorization, userId, userGroupsInfo, xApiUser);

        // TODO: test validations
    }
    
}
